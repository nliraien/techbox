@page
@model FeatureTryout.Pages_Notes.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Note</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Note.Title)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Note.Title)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Note.CreatedTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Note.CreatedTime)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Note.LastModifiedTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Note.LastModifiedTime)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Note.Content)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Note.Content)
        </dd>
    </dl>
</div>
<div>
    <a asp-page="./Edit" asp-route-id="@Model.Note.ID">Edit</a> |
    <a asp-page="./Index">Back to List</a>
</div>
<div>
    @*Below are 3 different ways of rendering partial view inside a Razor page file.*@
    <div>
        <p>1. Use Partil Tag Helper: </p>
        <partial name="_NoteTag" />
    </div>
    <div>
        <p>2. Use the PartialAsync. It returns an IHtmlContent type wrapped in a Task&lt;TResult&gt;: </p>
        @await Html.PartialAsync("_NoteTag")
    </div>
    <div>
        <p>3. Use the RenderPartialAsync HTML Helper. It returns void so it must be called within a Razor code block: </p>
        @{
            await Html.RenderPartialAsync("_NoteTag");
        }
    </div>
</div>
<div>
    @*Below is how to pass model into partial view.*@
    @await Html.PartialAsync("_AuthorBio", @Model.Author)
</div>
<div>
    @*Demo of passing ViewData into partial view.*@
    <p>Key1: @ViewData["Key1"]</p>
    @{
        await Html.RenderPartialAsync("_AuthorBio",
            @Model.Author,
            new ViewDataDictionary(ViewData)
            {
                { "ExKey1", "ExValue1" }
            });
    }
</div>